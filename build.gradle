// TODO: We can't seem to use the nexus-staging plugin since
// our package is put in with other softwareamazon repos
// and the plugin can't automatically find ours.  For now
// we'll just use the UI. An automatic solution would be nice.

plugins {
  id 'io.spring.dependency-management' version '1.0.7.RELEASE'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

ext {
  assert JavaVersion.current() == JavaVersion.VERSION_1_8: "Set JAVA_HOME to JDK 8. Current version is ${JavaVersion.current()}"
  jsr308 = file(new File("..")).absolutePath
  cfPath = "${jsr308}/checker-framework"
  cfiPath = "${jsr308}/checker-framework-inference"
  afu = "${jsr308}/annotation-tools/annotation-file-utilities"
  picoPath = "${jsr308}/immutability"
}

println '========================================='
println '            Compliance Checker           '
println '========================================='
println ''
println '-----------------------------------------'
println 'Important Environment Variables          '
println '-----------------------------------------'
println 'JSR308: ' + jsr308
println 'CF:     ' + cfPath
println 'CFI:    ' + cfiPath

sourceCompatibility = 1.8
group = 'software.amazon.checkerframework'
archivesBaseName = 'aws-kms-compliance-checker'

version = '1.1.0'

repositories {
  mavenCentral()
}

dependencies {
  testCompile 'com.amazonaws:aws-java-sdk-kms'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.checkerframework', name: 'testlib', version: '2.5.4'
  compile fileTree(dir: "${cfiPath}/dist", include: "checker-framework-inference.jar")
  compile fileTree(dir: "${cfPath}/checker/dist", include: "checker.jar")
  // sat4j solver dependency
  compile 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.4'
  compile 'org.ow2.sat4j:org.ow2.sat4j.maxsat:2.3.4'
  // z3 solver dependency
  compile fileTree(dir: "${cfiPath}/lib", include: "com.microsoft.z3.jar")
}

dependencyManagement {
  imports {
    mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
  }
}

sourceSets {
  main {
    java {
      srcDirs = ["src/main/java"]
    }

    resources {
      srcDirs = ["src/main/java"]
      exclude "**/*.java"
    }
  }

  test {
    java {
      // TODO: we shouldn't need source level dependency on CFITest
      srcDirs = ["src/test/java", "${cfiPath}/tests/checkers/inference/test"]
    }
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

compileJava {
  options.compilerArgs = [
          '-implicit:class',
          '-Awarns',
          '-Xmaxwarns', '10000',
  ]
}


//signing {
//  sign configurations.archives
//}

//uploadArchives {
//  repositories {
//    mavenDeployer {
//      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
////      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
////        authentication(userName: ossrhUsername, password: ossrhPassword)
////      }
////
////      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
////        authentication(userName: ossrhUsername, password: ossrhPassword)
////      }
//
//      pom.project {
//        name 'AWS KMS compliance checker'
//        packaging 'jar'
//        description 'A checker for the Checker Framework that assures that KMS keys are 256 bits.'
//        url 'https://github.com/awslabs/aws-kms-compliance-checker'
//
//        scm {
//          connection 'https://github.com/awslabs/aws-kms-compliance-checker.git'
//          developerConnection 'git@github.com:awslabs/aws-kms-compliance-checker.git'
//          url 'https://github.com/awslabs/aws-kms-compliance-checker'
//        }
//
//        licenses {
//          license {
//            name 'The Apache License, Version 2.0'
//            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//          }
//        }
//
//        developers {
//          developer {
//            id 'kelloggm'
//            name 'Martin Kellogg'
//            email 'kelloggm@cs.washington.edu'
//          }
//
//          developer {
//            id 'seanmcl'
//            name 'Sean McLaughlin'
//            email 'seanmcl@amazon.com'
//          }
//        }
//      }
//    }
//  }
//}
